language: go

go:
  - '1.13'

services:
  - docker

install:
  - export GOPROXY=https://proxy.golang.org
  - go install github.com/onsi/ginkgo/ginkgo
  - export PATH=$PATH:$GOPATH/bin
  - curl -sL https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.2.0/kubebuilder_2.2.0_linux_amd64.tar.gz | tar -xz -C /tmp/
  - sudo mv /tmp/kubebuilder_2.2.0_linux_amd64 /usr/local/kubebuilder
  - export PATH=$PATH:/usr/local/kubebuilder/bin

jobs:
  include:
    - stage: Unit Tests
      script: make test

     - stage: Cluster Tests
       before_script:
         # Download and install kubectl
         - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/

    #     # Download and install KinD
         - GO111MODULE=on go get sigs.k8s.io/kind
    #     # It's possible to download and install KinD using curl, similar as for kubectl
    #     # This is useful in cases when Go toolchain isn't available or you prefer running stable version
    #     # Binaries for KinD are available on GitHub Releases: https://github.com/kubernetes-sigs/kind/releases
          - curl -Lo kind https://github.com/kubernetes-sigs/kind/releases/download/0.6.0/kind-linux-amd64 && chmod +x kind && sudo mv kind /usr/local/bin/
          # Create a new Kubernetes cluster using KinD
          - kind create cluster
         # Set KUBECONFIG environment variable
         - export KUBECONFIG="$(kind get kubeconfig-path)"
    
    #     # Download and install helm
    #     - curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh
    #     - chmod 700 get_helm.sh
    #     - sudo ./get_helm.sh
    #     # yes, heredocs are broken in before_script: https://travis-ci.community/t/multiline-commands-have-two-spaces-in-front-breaks-heredocs/2756
    #     - |
    #       sed 's/^  //' <<\ \ EOF > tiller.yml
    #       ---
    #       apiVersion: v1
    #       kind: ServiceAccount
    #       metadata:
    #         name: tiller
    #         namespace: kube-system
    #       ---
    #       apiVersion: rbac.authorization.k8s.io/v1
    #       kind: ClusterRoleBinding
    #       metadata:
    #         name: tiller
    #       roleRef:
    #         apiGroup: rbac.authorization.k8s.io
    #         kind: ClusterRole
    #         name: cluster-admin
    #       subjects:
    #         - kind: ServiceAccount
    #           name: tiller
    #           namespace: kube-system
    #       EOF
    #      - kubectl create -f tiller.yml
    #     - helm init --service-account tiller --wait
       script: USE_EXISTING_CLUSTER=true  make test

      
